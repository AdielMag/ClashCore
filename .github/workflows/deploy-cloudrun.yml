name: Deploy to Cloud Run

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'src/MyApp.Unity/**'

  workflow_dispatch:

env:
  REGION: us-central1
  PROJECT_ID: clashcore

  # Clashcore Services
  SERVICES_IMAGE_NAME: clashcore-services
  SERVICES_REPO_NAME: clashcore
  SERVICES_SERVICE_NAME: clashcore-services

  # Gamehub Service
  GAMEHUB_IMAGE_NAME: clashcore-gamehub
  GAMEHUB_REPO_NAME: clashcore

  RUNTIME_SA: cloudrun-runtime@clashcore.iam.gserviceaccount.com

jobs:
  build-and-push-services:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: "beta"

      - name: Configure Docker to use Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build clashcore-services Docker image
        run: |
          docker build -f Dockerfile-deploy.services \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICES_REPO_NAME }}/${{ env.SERVICES_IMAGE_NAME }}:latest .

      - name: Push clashcore-services Docker image
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICES_REPO_NAME }}/${{ env.SERVICES_IMAGE_NAME }}:latest

  deploy-services:
    runs-on: ubuntu-latest
    needs: build-and-push-services

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: "beta"

      - name: Deploy clashcore-services to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICES_SERVICE_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICES_REPO_NAME }}/${{ env.SERVICES_IMAGE_NAME }}:latest \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --use-http2 \
            --service-account=${{ env.RUNTIME_SA }} \
            --set-env-vars=MONGO_DB_CONNECTION_STRING=${{ secrets.MONGO_DB_CONNECTION_STRING }}

  build-gamehub-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: "beta"

      - name: Configure Docker to use Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build clashcore-gamehub Docker image
        run: |
          docker build -f Dockerfile-deploy.gamehub \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAMEHUB_REPO_NAME }}/${{ env.GAMEHUB_IMAGE_NAME }}:latest .

      - name: Push clashcore-gamehub Docker image
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAMEHUB_REPO_NAME }}/${{ env.GAMEHUB_IMAGE_NAME }}:latest

      - name: Invalidate active matches after GameHub update
        run: |
          # Wait a moment for the image to be available in registry
          sleep 30
          
          # Call the invalidation API endpoint
          curl -X POST https://clashcore-services-${{ env.REGION }}.a.run.app/grpc/Shared.Services.IMatchMakerService/InvalidateAllMatchesAsync \
            -H "Content-Type: application/json" \
            -d '{}' \
            --fail-with-body || echo "Warning: Failed to invalidate matches, but continuing deployment"
